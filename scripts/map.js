// initialize the map centered on UMBC
var map = L.map('map').setView([39.2557, -76.7110], 16.5); // Zoom level adjusted for campus view

// Global dict of locations
const LOCATIONS = {
    "walker": [39.260266139673, -76.71523060375925],
    "walker avenue apartments": [39.25952914250935, -76.71411958317229],
    //-------------------------------------------------------------------
    "army rotc": [39.258899662426515, -76.71712805449413],
    "naval rotc": [39.25848356232322, -76.71710968215092],
    "alumni house": [39.25824172522396, -76.71778945886948],
    //-------------------------------------------------------------------
    "cho": [39.25876481471272, -76.7131147416535],
    "choptank": [39.25876481471272, -76.7131147416535],
    //-------------------------------------------------------------------
    "tan": [39.258768371118535, -76.71270136389451],
    "West Hill Apartments": [39.258768371118535, -76.71270136389451],
    //-------------------------------------------------------------------
    "magothy": [39.25888217605801, -76.71237525480258],
    "mag": [39.25888217605801, -76.71237525480258],
    //-------------------------------------------------------------------
    "wye": [39.25871146857951, -76.71238903406],
    //-------------------------------------------------------------------
    "sev": [39.25849300185937, -76.71147205003585],
    "severn": [39.25849300185937, -76.71147205003585],
    //-------------------------------------------------------------------
    "chs": [39.25893907845846, -76.71171385044711],
    "chester": [39.25893907845846, -76.71171385044711],
    //-------------------------------------------------------------------
    "acc": [39.25805556068812, -76.71200484807368],
    "apartment": [39.25805556068812, -76.71200484807368],
    //-------------------------------------------------------------------
    "gun": [39.25793464150511, -76.71118268563033],
    "gunpowder": [39.25793464150511, -76.71118268563033],
    //-------------------------------------------------------------------
    "nan": [39.25803777846592, -76.71153176015127],
    "nanticoke": [39.25803777846592, -76.71153176015127],
    //-------------------------------------------------------------------
    "mon": [39.25806267357166, -76.71081064568037],
    "monocacy": [39.25806267357166, -76.71081064568037],
    //-------------------------------------------------------------------
    "tuc": [39.25766435081905, -76.71089332122482],
    "tuckahoe": [39.25766435081905, -76.71089332122482],
    //-------------------------------------------------------------------
    "chi": [39.25756476977727, -76.71045697807362],
    "chincoteague": [39.25756476977727, -76.71045697807362],
    //-------------------------------------------------------------------
    "ant": [39.257778157550725, -76.71017220675391],
    "antietam": [39.257778157550725, -76.71017220675391],
    //-------------------------------------------------------------------
    "sas": [39.25815514102985, -76.71023191686933],
    "sassafras": [39.25815514102985, -76.71023191686933],
    //-------------------------------------------------------------------
    "wic": [39.258048447798025, -76.70980475988976],
    "wicomico": [39.258048447798025, -76.70980475988976],
    //-------------------------------------------------------------------
    "ptx": [39.25821205073331, -76.70963345983523],
    "patuxent": [39.25821205073331, -76.70963345983523],
    //-------------------------------------------------------------------
    "elk": [39.25776769244494, -76.70949728478045],
    "Hillside Apartments": [39.25776769244494, -76.70949728478045],
    //-------------------------------------------------------------------
    "dpc": [39.25778465367624, -76.70886913571933],
    "deep creek": [39.25778465367624, -76.70886913571933],
    //-------------------------------------------------------------------
    "cas": [39.25811557030422, -76.70912762716266],
    "casselman": [39.25811557030422, -76.70912762716266],
    //-------------------------------------------------------------------
    "bre": [39.258088883537276, -76.70870025464302],
    "breton": [39.258088883537276, -76.70870025464302],
    //-------------------------------------------------------------------
    "sdl": [39.25840912407, -76.70868302188012],
    "sideling": [39.25840912407, -76.70868302188012],
    //-------------------------------------------------------------------
    "poc": [39.258435810715014, -76.70910350129462],
    "pocomoke": [39.258435810715014, -76.70910350129462],
    //-------------------------------------------------------------------
    "man": [39.2586172796318, -76.7091827720039],
    "manokin": [39.2586172796318, -76.7091827720039],
    //-------------------------------------------------------------------
    "erickson hall": [39.25711747829031, -76.70978247217754],
    "erickson": [39.25711747829031, -76.70978247217754],
    "erk": [39.25711747829031, -76.70978247217754],
    //-------------------------------------------------------------------
    "reslife office": [39.25679189440456, -76.70996169291159],
    "reslife facilities office": [39.25667980779895, -76.7092930617115],
    "ymca preschool center": [39.25797909672385, -76.70807972006365],
    "harbor hall": [39.257328352724244, -76.70848090815018],
    "chesapeake hall": [39.256806146378, -76.70860541481511],
    "satellite plant": [39.25699896147398, -76.707028330474],
    "the center for well-being": [39.25604836856641, -76.70903047865421],
    "susquehanna hall": [39.25604836856641, -76.70903047865421],
    "true grits": [39.25568951294304, -76.70784420685631],
    "potomac hall": [39.25596802790243, -76.70670981286698],
    "patapsco hall": [39.25510569913565, -76.70729084391283],
    "greenhouse": [39.258237387358584, -76.71352837917006],
    "central plant": [39.25759104359118, -76.7143893393311],
    //--------------------------------------------------------------------------
    "albin o. kuhn library & gallery": [39.25634274789053, -76.7116860013322],
    "library": [39.25634274789053, -76.7116860013322],
    //------------------------------------------------------------------------
    "retriever learning center": [39.25646127002805, -76.71130580586146],
    "rlc": [39.25646127002805, -76.71130580586146],
    //-------------------------------------------------------------------------------
    "financial aid and scholarship office": [39.256625671367885, -76.71234270259082],
    "scholarship office": [39.256625671367885, -76.71234270259082],
    //-------------------------------------------------------------------------------
    "public policy building": [39.25525076711157, -76.70928414053373],
    "public policy": [39.25525076711157, -76.70928414053373],
    //-----------------------------------------------------------------------------
    "physics building": [39.254500401386366, -76.70967184110336],
    "physics": [39.254500401386366, -76.70967184110336],
    //----------------------------------------------------------------------------
    "warehouse": [39.252663273271935, -76.70430793627368],
    //------------------------------------------------------------------------
    "facilities management building": [39.25197520862123, -76.70744658390562],
    "chesapeake arena": [39.25679875875331, -76.7085723424885],
    "interdisciplinary life sciences building": [39.25394973933029, -76.71102531418579],
    "ilsb": [39.25394973933029, -76.71102531418579],
    //-----------------------------------------------------------------------------------
    "the commons": [39.25498165688642, -76.71086794950686],
    "commons": [39.25498165688642, -76.71086794950686],
    //-----------------------------------------------------------------------------------
    "lecture hall 1": [39.25482860418606, -76.71182662514063],
    "biological sciences building": [39.254857442305, -76.71214637996125],
    "biology building": [39.254857442305, -76.71214637996125],
    //------------------------------------------------------------------------------------
    "retriever activities center": [39.25281114049344, -76.71252441928998],
    "rac": [39.25281114049344, -76.71252441928998],
    //------------------------------------------------------------------------------------
    "math & psychology building": [39.254082333515875, -76.71243021375282],
    "sondheim building": [39.25346182924767, -76.71278782840974],
    "meyerhoff chemistry building": [39.254976634159405, -76.71308215501345],
    "university center": [39.254376490237675, -76.7132251175669],
    "sherman hall": [39.25359133377247, -76.71322398959032],
    "administration building": [39.25306700577804, -76.71348322791367],
    "information technology/engineering building": [39.25383359280315, -76.71428726078719],
    "ite": [39.25383359280315, -76.71428726078719],
    "engineering building": [39.254558978076936, -76.71399716391333],
    "fine arts building": [39.25495953946026, -76.71370460017584],
    "performing arts & humanities building": [39.25510314572796, -76.71517938793554],
    //-----------------------------------------------------------------------------------
    "bwtech 5525": [39.24961455729257, -76.71142489375562],
    "bwtech 5523": [39.24976417578988, -76.71250013096193],
    "bwtech 5521": [39.24945843330289, -76.71487741322274],
    "bwtech 5522": [39.24792319555776, -76.71330655886665],
    "bwtech 5520": [39.24798824868646, -76.71460860392116],
    "umbc stadium complex": [39.250573889558346, -76.70749632656262],
    "umbc stadium ticket booth": [39.25050758004129, -76.70860137120687],
    "retriever soccer park ticket booth": [39.25184614891174, -76.70568534933862],
}


// add OpenStreetMap tile layer
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; OpenStreetMap contributors',
    maxZoom: 22
}).addTo(map);

// Add invisible clickable building areas
function addClickableBuildings() {
    // Define building information with polygon coordinates and details
    const buildings = {
        "Library": {
            // These are approximate polygon corners - you'll need to adjust for actual building outlines
            polygon: [
                [39.25663, -76.71199],
                [39.25663, -76.71120],
                [39.25600, -76.71120],
                [39.25600, -76.71199]
            ],
            info: {
                name: "Albin O. Kuhn Library & Gallery",
                hours: "Monday-Thursday: 8am-10pm<br>Friday: 8am-8pm<br>Saturday: 10am-6pm<br>Sunday: 12pm-8pm",
                description: "The Albin O. Kuhn Library & Gallery serves as UMBC's central academic information resource.",
                facilities: ["Study spaces", "Computer labs", "Special collections", "Art gallery"]
            }
        },
        "Commons": {
            polygon: [
                [39.25528, -76.71119],
                [39.25528, -76.71056],
                [39.25470, -76.71056],
                [39.25470, -76.71119]
            ],
            info: {
                name: "The Commons",
                hours: "Monday-Friday: 7am-11pm<br>Saturday-Sunday: 9am-10pm",
                description: "The Commons is UMBC's community center that houses dining options, meeting spaces, and offices.",
                facilities: ["True Grits Dining Hall", "Yum Shoppe", "Gameroom", "Bookstore"]
            }
        },
        "Engineering": {
            polygon: [
                [39.25486, -76.71435],
                [39.25486, -76.71366],
                [39.25426, -76.71366],
                [39.25426, -76.71435]
            ],
            info: {
                name: "Engineering Building",
                hours: "Monday-Friday: 7am-10pm<br>Saturday-Sunday: Limited access",
                description: "Home to the College of Engineering and Information Technology.",
                facilities: ["Classrooms", "Research labs", "Faculty offices", "Computer labs"]
            }
        },
        // Add more buildings as needed
    };

    // Create invisible polygons for each building
    for (const [key, building] of Object.entries(buildings)) {
        // Create invisible polygon
        const polygon = L.polygon(building.polygon, {
            color: 'transparent',       // Invisible border
            fillColor: 'transparent',   // Invisible fill
            fillOpacity: 0,             // Completely transparent
            weight: 0                   // No border
        }).addTo(map);
        
        // Change cursor to pointer when hovering over building
        polygon.on('mouseover', function() {
            this.setStyle({
                fillOpacity: 0.2,       // Slight highlight on hover
                fillColor: '#FDB515'    // UMBC gold
            });
            document.getElementById('map').style.cursor = 'pointer';
        });
        
        // Remove highlight when mouse leaves
        polygon.on('mouseout', function() {
            this.setStyle({
                fillOpacity: 0,
                fillColor: 'transparent'
            });
            document.getElementById('map').style.cursor = '';
        });
        
        // Create popup content with HTML formatting
        const popupContent = `
            <div class="building-popup">
                <h3>${building.info.name}</h3>
                <p><strong>Hours:</strong><br>${building.info.hours}</p>
                <p>${building.info.description}</p>
                <p><strong>Facilities:</strong></p>
                <ul>
                    ${building.info.facilities.map(facility => `<li>${facility}</li>`).join('')}
                </ul>
            </div>
        `;
        
        // Bind popup to polygon
        polygon.bindPopup(popupContent, {
            maxWidth: 300,
            className: 'building-info-popup'
        });
    }
}

// Call the function to add clickable buildings
addClickableBuildings();

//function to handle search
document.getElementById('search-place').addEventListener('submit', function(event) {
    event.preventDefault(); // Prevent form submission from reloading page

    let searchQuery = document.getElementById('search-input').value.trim().toLowerCase();

    console.log(searchQuery);
    
    // Simple example of location search (you can expand this with a geocoding API)
    let locations = {
        "walker": [39.260266139673, -76.71523060375925],
        "walker avenue apartments": [39.25952914250935, -76.71411958317229],
        //-------------------------------------------------------------------
        "army rotc": [39.258899662426515, -76.71712805449413],
        "naval rotc": [39.25848356232322, -76.71710968215092],
        "alumni house": [39.25824172522396, -76.71778945886948],
        //-------------------------------------------------------------------
        "cho": [39.25876481471272, -76.7131147416535],
        "choptank": [39.25876481471272, -76.7131147416535],
        //-------------------------------------------------------------------
        "tan": [39.258768371118535, -76.71270136389451],
        "West Hill Apartments": [39.258768371118535, -76.71270136389451],
        //-------------------------------------------------------------------
        "magothy": [39.25888217605801, -76.71237525480258],
        "mag": [39.25888217605801, -76.71237525480258],
        //-------------------------------------------------------------------
        "wye": [39.25871146857951, -76.71238903406],
        //-------------------------------------------------------------------
        "sev": [39.25849300185937, -76.71147205003585],
        "severn": [39.25849300185937, -76.71147205003585],
        //-------------------------------------------------------------------
        "chs": [39.25893907845846, -76.71171385044711],
        "chester": [39.25893907845846, -76.71171385044711],
        //-------------------------------------------------------------------
        "acc": [39.25805556068812, -76.71200484807368],
        "apartment": [39.25805556068812, -76.71200484807368],
        //-------------------------------------------------------------------
        "gun": [39.25793464150511, -76.71118268563033],
        "gunpowder": [39.25793464150511, -76.71118268563033],
        //-------------------------------------------------------------------
        "nan": [39.25803777846592, -76.71153176015127],
        "nanticoke": [39.25803777846592, -76.71153176015127],
        //-------------------------------------------------------------------
        "mon": [39.25806267357166, -76.71081064568037],
        "monocacy": [39.25806267357166, -76.71081064568037],
        //-------------------------------------------------------------------
        "tuc": [39.25766435081905, -76.71089332122482],
        "tuckahoe": [39.25766435081905, -76.71089332122482],
        //-------------------------------------------------------------------
        "chi": [39.25756476977727, -76.71045697807362],
        "chincoteague": [39.25756476977727, -76.71045697807362],
        //-------------------------------------------------------------------
        "ant": [39.257778157550725, -76.71017220675391],
        "antietam": [39.257778157550725, -76.71017220675391],
        //-------------------------------------------------------------------
        "sas": [39.25815514102985, -76.71023191686933],
        "sassafras": [39.25815514102985, -76.71023191686933],
        //-------------------------------------------------------------------
        "wic": [39.258048447798025, -76.70980475988976],
        "wicomico": [39.258048447798025, -76.70980475988976],
        //-------------------------------------------------------------------
        "ptx": [39.25821205073331, -76.70963345983523],
        "patuxent": [39.25821205073331, -76.70963345983523],
        //-------------------------------------------------------------------
        "elk": [39.25776769244494, -76.70949728478045],
        "Hillside Apartments": [39.25776769244494, -76.70949728478045],
        //-------------------------------------------------------------------
        "dpc": [39.25778465367624, -76.70886913571933],
        "deep creek": [39.25778465367624, -76.70886913571933],
        //-------------------------------------------------------------------
        "cas": [39.25811557030422, -76.70912762716266],
        "casselman": [39.25811557030422, -76.70912762716266],
        //-------------------------------------------------------------------
        "bre": [39.258088883537276, -76.70870025464302],
        "breton": [39.258088883537276, -76.70870025464302],
        //-------------------------------------------------------------------
        "sdl": [39.25840912407, -76.70868302188012],
        "sideling": [39.25840912407, -76.70868302188012],
        //-------------------------------------------------------------------
        "poc": [39.258435810715014, -76.70910350129462],
        "pocomoke": [39.258435810715014, -76.70910350129462],
        //-------------------------------------------------------------------
        "man": [39.2586172796318, -76.7091827720039],
        "manokin": [39.2586172796318, -76.7091827720039],
        //-------------------------------------------------------------------
        "erickson hall": [39.25711747829031, -76.70978247217754],
        "erickson": [39.25711747829031, -76.70978247217754],
        "erk": [39.25711747829031, -76.70978247217754],
        //-------------------------------------------------------------------
        "reslife office": [39.25679189440456, -76.70996169291159],
        "reslife facilities office": [39.25667980779895, -76.7092930617115],
        "ymca preschool center": [39.25797909672385, -76.70807972006365],
        "harbor hall": [39.257328352724244, -76.70848090815018],
        "chesapeake hall": [39.256806146378, -76.70860541481511],
        "satellite plant": [39.25699896147398, -76.707028330474],
        "the center for well-being": [39.25604836856641, -76.70903047865421],
        "susquehanna hall": [39.25604836856641, -76.70903047865421],
        "true grits": [39.25568951294304, -76.70784420685631],
        "potomac hall": [39.25596802790243, -76.70670981286698],
        "patapsco hall": [39.25510569913565, -76.70729084391283],
        "greenhouse": [39.258237387358584, -76.71352837917006],
        "central plant": [39.25759104359118, -76.7143893393311],
        //--------------------------------------------------------------------------
        "albin o. kuhn library & gallery": [39.25634274789053, -76.7116860013322],
        "library": [39.25634274789053, -76.7116860013322],
        //------------------------------------------------------------------------
        "retriever learning center": [39.25646127002805, -76.71130580586146],
        "rlc": [39.25646127002805, -76.71130580586146],
        //-------------------------------------------------------------------------------
        "financial aid and scholarship office": [39.256625671367885, -76.71234270259082],
        "scholarship office": [39.256625671367885, -76.71234270259082],
        //-------------------------------------------------------------------------------
        "public policy building": [39.25525076711157, -76.70928414053373],
        "public policy": [39.25525076711157, -76.70928414053373],
        //-----------------------------------------------------------------------------
        "physics building": [39.254500401386366, -76.70967184110336],
        "physics": [39.254500401386366, -76.70967184110336],
        //----------------------------------------------------------------------------
        "warehouse": [39.252663273271935, -76.70430793627368],
        //------------------------------------------------------------------------
        "facilities management building": [39.25197520862123, -76.70744658390562],
        "chesapeake arena": [39.25679875875331, -76.7085723424885],
        "interdisciplinary life sciences building": [39.25394973933029, -76.71102531418579],
        "ilsb": [39.25394973933029, -76.71102531418579],
        //-----------------------------------------------------------------------------------
        "the commons": [39.25498165688642, -76.71086794950686],
        "commons": [39.25498165688642, -76.71086794950686],
        //-----------------------------------------------------------------------------------
        "lecture hall 1": [39.25482860418606, -76.71182662514063],
        "biological sciences building": [39.254857442305, -76.71214637996125],
        "biology building": [39.254857442305, -76.71214637996125],
        //------------------------------------------------------------------------------------
        "retriever activities center": [39.25281114049344, -76.71252441928998],
        "rac": [39.25281114049344, -76.71252441928998],
        //------------------------------------------------------------------------------------
        "math & psychology building": [39.254082333515875, -76.71243021375282],
        "sondheim building": [39.25346182924767, -76.71278782840974],
        "meyerhoff chemistry building": [39.254976634159405, -76.71308215501345],
        "university center": [39.254376490237675, -76.7132251175669],
        "sherman hall": [39.25359133377247, -76.71322398959032],
        "administration building": [39.25306700577804, -76.71348322791367],
        "information technology/engineering building": [39.25383359280315, -76.71428726078719],
        "ite": [39.25383359280315, -76.71428726078719],
        "engineering building": [39.254558978076936, -76.71399716391333],
        "fine arts building": [39.25495953946026, -76.71370460017584],
        "performing arts & humanities building": [39.25510314572796, -76.71517938793554],
        //-----------------------------------------------------------------------------------
        "bwtech 5525": [39.24961455729257, -76.71142489375562],
        "bwtech 5523": [39.24976417578988, -76.71250013096193],
        "bwtech 5521": [39.24945843330289, -76.71487741322274],
        "bwtech 5522": [39.24792319555776, -76.71330655886665],
        "bwtech 5520": [39.24798824868646, -76.71460860392116],
        "umbc stadium complex": [39.250573889558346, -76.70749632656262],
        "umbc stadium ticket booth": [39.25050758004129, -76.70860137120687],
        "retriever soccer park ticket booth": [39.25184614891174, -76.70568534933862],
    };
        
    if (locations[searchQuery]) {
        map.flyTo(locations[searchQuery], 19); // Zoom in and move to location
    } else {
        alert("Location not found!");
    }
});

// Add autocomplete functionality
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('search-input');
    const autocompleteContainer = document.createElement('div');
    autocompleteContainer.className = 'autocomplete-items';
    searchInput.parentNode.appendChild(autocompleteContainer);

    // Simple example of location search (you can expand this with a geocoding API)
    let locations = {
        "walker": [39.260266139673, -76.71523060375925],
        "walker avenue apartments": [39.25952914250935, -76.71411958317229],
        //-------------------------------------------------------------------
        "army rotc": [39.258899662426515, -76.71712805449413],
        "naval rotc": [39.25848356232322, -76.71710968215092],
        "alumni house": [39.25824172522396, -76.71778945886948],
        //-------------------------------------------------------------------
        "cho": [39.25876481471272, -76.7131147416535],
        "choptank": [39.25876481471272, -76.7131147416535],
        //-------------------------------------------------------------------
        "tan": [39.258768371118535, -76.71270136389451],
        "West Hill Apartments": [39.258768371118535, -76.71270136389451],
        //-------------------------------------------------------------------
        "magothy": [39.25888217605801, -76.71237525480258],
        "mag": [39.25888217605801, -76.71237525480258],
        //-------------------------------------------------------------------
        "wye": [39.25871146857951, -76.71238903406],
        //-------------------------------------------------------------------
        "sev": [39.25849300185937, -76.71147205003585],
        "severn": [39.25849300185937, -76.71147205003585],
        //-------------------------------------------------------------------
        "chs": [39.25893907845846, -76.71171385044711],
        "chester": [39.25893907845846, -76.71171385044711],
        //-------------------------------------------------------------------
        "acc": [39.25805556068812, -76.71200484807368],
        "apartment": [39.25805556068812, -76.71200484807368],
        //-------------------------------------------------------------------
        "gun": [39.25793464150511, -76.71118268563033],
        "gunpowder": [39.25793464150511, -76.71118268563033],
        //-------------------------------------------------------------------
        "nan": [39.25803777846592, -76.71153176015127],
        "nanticoke": [39.25803777846592, -76.71153176015127],
        //-------------------------------------------------------------------
        "mon": [39.25806267357166, -76.71081064568037],
        "monocacy": [39.25806267357166, -76.71081064568037],
        //-------------------------------------------------------------------
        "tuc": [39.25766435081905, -76.71089332122482],
        "tuckahoe": [39.25766435081905, -76.71089332122482],
        //-------------------------------------------------------------------
        "chi": [39.25756476977727, -76.71045697807362],
        "chincoteague": [39.25756476977727, -76.71045697807362],
        //-------------------------------------------------------------------
        "ant": [39.257778157550725, -76.71017220675391],
        "antietam": [39.257778157550725, -76.71017220675391],
        //-------------------------------------------------------------------
        "sas": [39.25815514102985, -76.71023191686933],
        "sassafras": [39.25815514102985, -76.71023191686933],
        //-------------------------------------------------------------------
        "wic": [39.258048447798025, -76.70980475988976],
        "wicomico": [39.258048447798025, -76.70980475988976],
        //-------------------------------------------------------------------
        "ptx": [39.25821205073331, -76.70963345983523],
        "patuxent": [39.25821205073331, -76.70963345983523],
        //-------------------------------------------------------------------
        "elk": [39.25776769244494, -76.70949728478045],
        "Hillside Apartments": [39.25776769244494, -76.70949728478045],
        //-------------------------------------------------------------------
        "dpc": [39.25778465367624, -76.70886913571933],
        "deep creek": [39.25778465367624, -76.70886913571933],
        //-------------------------------------------------------------------
        "cas": [39.25811557030422, -76.70912762716266],
        "casselman": [39.25811557030422, -76.70912762716266],
        //-------------------------------------------------------------------
        "bre": [39.258088883537276, -76.70870025464302],
        "breton": [39.258088883537276, -76.70870025464302],
        //-------------------------------------------------------------------
        "sdl": [39.25840912407, -76.70868302188012],
        "sideling": [39.25840912407, -76.70868302188012],
        //-------------------------------------------------------------------
        "poc": [39.258435810715014, -76.70910350129462],
        "pocomoke": [39.258435810715014, -76.70910350129462],
        //-------------------------------------------------------------------
        "man": [39.2586172796318, -76.7091827720039],
        "manokin": [39.2586172796318, -76.7091827720039],
        //-------------------------------------------------------------------
        "erickson hall": [39.25711747829031, -76.70978247217754],
        "erickson": [39.25711747829031, -76.70978247217754],
        "erk": [39.25711747829031, -76.70978247217754],
        //-------------------------------------------------------------------
        "reslife office": [39.25679189440456, -76.70996169291159],
        "reslife facilities office": [39.25667980779895, -76.7092930617115],
        "ymca preschool center": [39.25797909672385, -76.70807972006365],
        "harbor hall": [39.257328352724244, -76.70848090815018],
        "chesapeake hall": [39.256806146378, -76.70860541481511],
        "satellite plant": [39.25699896147398, -76.707028330474],
        "the center for well-being": [39.25604836856641, -76.70903047865421],
        "susquehanna hall": [39.25604836856641, -76.70903047865421],
        "true grits": [39.25568951294304, -76.70784420685631],
        "potomac hall": [39.25596802790243, -76.70670981286698],
        "patapsco hall": [39.25510569913565, -76.70729084391283],
        "greenhouse": [39.258237387358584, -76.71352837917006],
        "central plant": [39.25759104359118, -76.7143893393311],
        //--------------------------------------------------------------------------
        "albin o. kuhn library & gallery": [39.25634274789053, -76.7116860013322],
        "library": [39.25634274789053, -76.7116860013322],
        //------------------------------------------------------------------------
        "retriever learning center": [39.25646127002805, -76.71130580586146],
        "rlc": [39.25646127002805, -76.71130580586146],
        //-------------------------------------------------------------------------------
        "financial aid and scholarship office": [39.256625671367885, -76.71234270259082],
        "scholarship office": [39.256625671367885, -76.71234270259082],
        //-------------------------------------------------------------------------------
        "public policy building": [39.25525076711157, -76.70928414053373],
        "public policy": [39.25525076711157, -76.70928414053373],
        //-----------------------------------------------------------------------------
        "physics building": [39.254500401386366, -76.70967184110336],
        "physics": [39.254500401386366, -76.70967184110336],
        //----------------------------------------------------------------------------
        "warehouse": [39.252663273271935, -76.70430793627368],
        //------------------------------------------------------------------------
        "facilities management building": [39.25197520862123, -76.70744658390562],
        "chesapeake arena": [39.25679875875331, -76.7085723424885],
        "interdisciplinary life sciences building": [39.25394973933029, -76.71102531418579],
        "ilsb": [39.25394973933029, -76.71102531418579],
        //-----------------------------------------------------------------------------------
        "the commons": [39.25498165688642, -76.71086794950686],
        "commons": [39.25498165688642, -76.71086794950686],
        //-----------------------------------------------------------------------------------
        "lecture hall 1": [39.25482860418606, -76.71182662514063],
        "biological sciences building": [39.254857442305, -76.71214637996125],
        "biology building": [39.254857442305, -76.71214637996125],
        //------------------------------------------------------------------------------------
        "retriever activities center": [39.25281114049344, -76.71252441928998],
        "rac": [39.25281114049344, -76.71252441928998],
        //------------------------------------------------------------------------------------
        "math & psychology building": [39.254082333515875, -76.71243021375282],
        "sondheim building": [39.25346182924767, -76.71278782840974],
        "meyerhoff chemistry building": [39.254976634159405, -76.71308215501345],
        "university center": [39.254376490237675, -76.7132251175669],
        "sherman hall": [39.25359133377247, -76.71322398959032],
        "administration building": [39.25306700577804, -76.71348322791367],
        "information technology/engineering building": [39.25383359280315, -76.71428726078719],
        "ite": [39.25383359280315, -76.71428726078719],
        "engineering building": [39.254558978076936, -76.71399716391333],
        "fine arts building": [39.25495953946026, -76.71370460017584],
        "performing arts & humanities building": [39.25510314572796, -76.71517938793554],
        //-----------------------------------------------------------------------------------
        "bwtech 5525": [39.24961455729257, -76.71142489375562],
        "bwtech 5523": [39.24976417578988, -76.71250013096193],
        "bwtech 5521": [39.24945843330289, -76.71487741322274],
        "bwtech 5522": [39.24792319555776, -76.71330655886665],
        "bwtech 5520": [39.24798824868646, -76.71460860392116],
        "umbc stadium complex": [39.250573889558346, -76.70749632656262],
        "umbc stadium ticket booth": [39.25050758004129, -76.70860137120687],
        "retriever soccer park ticket booth": [39.25184614891174, -76.70568534933862],
    };
    
    // Get all location keys for autocomplete
    const locationKeys = Object.keys(locations);
    
    // Show suggestions as user types
    searchInput.addEventListener('input', function() {
        
        const value = this.value.toLowerCase().trim();
        
        // Clear previous suggestions
        autocompleteContainer.innerHTML = '';
        
        if (!value) return false;
        
        // Filter matching locations
        const matches = locationKeys.filter(key => 
            key.toLowerCase().includes(value)
        );
        
        // Show only top 5 matches to avoid overwhelming the UI
        matches.slice(0, 5).forEach(match => {
            console.log(match);
            const item = document.createElement('div');
            item.innerHTML = match;
            item.addEventListener('click', function() {
                searchInput.value = match;
                autocompleteContainer.innerHTML = '';
                // Move map to selected location
                map.flyTo(locations[match], 19);
            });
            autocompleteContainer.appendChild(item);
        });
    });
    
    // Hide suggestions when clicking elsewhere
    document.addEventListener('click', function(e) {
        if (e.target !== searchInput) {
            autocompleteContainer.innerHTML = '';
        }
    });
});

document.addEventListener("DOMContentLoaded", function() {
    // Select all dropdowns
    const dropdowns = document.querySelectorAll('.dropdown');

    // Add click event to each dropdown
    dropdowns.forEach(dropdown => {
        dropdown.querySelector('button').addEventListener('click', function() {
            // Toggle the active class to show/hide the dropdown content
            dropdown.classList.toggle('active');
        });
    });
});

//#region ROUTING
// Custom Google router
L.Routing.Google = L.Class.extend({
    initialize: function(options) {
        this.options = {
            travelMode: 'WALKING',
            unitSystem: google.maps.UnitSystem.IMPERIAL,
            ...options
        };
    },

    // The main routing function called by L.Routing.control
    route: function(waypoints, callback, context, options) {
        var _this = this; // Keep reference to 'this' for the callback
        // Combine default router options, per-route options from control, if any
        var routeOpts = L.Util.extend({}, this.options, options);

        // Check if Google Maps API is ready
        if (typeof google === 'undefined' || !google.maps || !google.maps.DirectionsService) {
            return callback.call(context, {
                status: -1, // Use a custom error status
                message: "Google Maps API not loaded or ready."
            });
        }

        var directionsService = new google.maps.DirectionsService();

        // Extract L.LatLng objects from LRM waypoints
        var originLatLng = waypoints[0].latLng;
        var destinationLatLng = waypoints[waypoints.length - 1].latLng;

        // Build the Google Directions Request object
        var request = {
            origin: { lat: originLatLng.lat, lng: originLatLng.lng },
            destination: { lat: destinationLatLng.lat, lng: destinationLatLng.lng },
            travelMode: routeOpts.travelMode,
            unitSystem: routeOpts.unitSystem
            // Add more options from routeOpts if needed (e.g., provideRouteAlternatives)
        };

        // Handle intermediate waypoints if present (optional, more complex)
        if (waypoints.length > 2) {
            request.waypoints = waypoints.slice(1, -1).map(function(wp) {
                return { location: { lat: wp.latLng.lat, lng: wp.latLng.lng }, stopover: true };
            });
            // request.optimizeWaypoints = true; // Optional
        }

        // Perform the routing request
        directionsService.route(request, function(response, status) {
            if (status === google.maps.DirectionsStatus.OK) {
                try {
                    // Convert the Google response to the format LRM expects
                    const lrmRoutes = [_this._convertRoute(response)]; // LRM expects an array of route objects
                    // Call LRM's callback with error=null, routes=array
                    callback.call(context, null, lrmRoutes);
                } catch (e) {
                     console.error("Error converting Google route:", e);
                     callback.call(context, { status: -2, message: "Error processing Google Directions response: " + e.message });
                }
            } else {
                // Pass the Google error status/message back to LRM's callback
                console.error("Google Directions request failed:", status);
                callback.call(context, { status: status, message: "Google Directions request failed: " + status });
            }
        });

        return this; // LRM expects the router instance to be returned
    },

    // Private helper method to convert Google route format to LRM format
    _convertRoute: function(googleRouteResponse) {
        var route = googleRouteResponse.routes[0]; // Get the first route
        var leg = route.legs[0]; // Assuming only one leg (no complex waypoints)
        var coordinates = []; // Array for route geometry (L.LatLng)
        var instructions = []; // Array for LRM instructions
        var currentCoordIndex = 0; // Keep track of coordinate index for instructions

        // Process each step in the leg
        leg.steps.forEach(function(step, i) {
            // Decode the polyline for this step's path
            var stepPath = google.maps.geometry.encoding.decodePath(step.polyline.points);
            var stepCoords = stepPath.map(function(latLng) {
                return L.latLng(latLng.lat(), latLng.lng());
            });

            // Add coordinates to the main array, avoiding duplicates at step boundaries
            if (coordinates.length > 0 && stepCoords.length > 0) {
                if (coordinates[coordinates.length - 1].equals(stepCoords[0])) {
                    stepCoords = stepCoords.slice(1); // Remove duplicate start point
                }
            }
            coordinates = coordinates.concat(stepCoords);

            // Create the instruction object for LRM
            // *** This is the SIMPLE version WITHOUT type/modifier for icons ***
            instructions.push({
                text: step.instructions,       // Raw HTML instructions from Google
                distance: step.distance.value, // Meters
                time: step.duration.value,     // Seconds
                index: currentCoordIndex       // Index in the coordinates array for start of step
                // No 'type' or 'modifier' properties in this reverted version
            });

            // Update the starting index for the next step
            currentCoordIndex = coordinates.length;
        });

        // Construct the object LRM expects
        return {
            name: route.summary || '', // Road names summary from Google (might be empty for walking)
            summary: {
                totalDistance: leg.distance.value, // Meters
                totalTime: leg.duration.value      // Seconds
            },
            coordinates: coordinates,          // Array of L.LatLng for the route line
            instructions: instructions,        // Array of instruction objects
            waypoints: [], // LRM waypoints; can be complex, start simple
                           // Could use route.legs[0].start_location/end_location, but LRM often recalculates
            inputWaypoints: [] // Original input waypoints if needed by LRM features
        };
    }
});

/* we need a custom formatter because default LRM formatter doesn't handle
    Google's html tags well */
L.Routing.HtmlFormatter = L.Routing.Formatter.extend({
    options: {
        ...L.Routing.Formatter.prototype.options
    },

    formatInstruction: function(instruction, i) {
        return instruction.text;
    }
});

// Custom itinerary builder to handle proper formatting
L.Routing.CustomItineraryBuilder = L.Routing.ItineraryBuilder.extend({

    // to store the steps container <tbody> reference
    _stepsContainer: null,

    // override createStepsContainer to store the reference
    createStepsContainer: function() {
        // call parent implementation first to get the actual steps container
        var container = L.Routing.ItineraryBuilder.prototype.createStepsContainer.call(this);
        this._stepsContainer = container; // store it
        return container;
    },

    // override createStep to perform custom DOM creation and use innerHTML
    createStep: function(text, distance, stepsContainer_param_ignored) {

    // retrieve the stored container reference (the <tbody>)
    var actualStepsContainer = this._stepsContainer;

    // validate the stored container before attempting to append it
    if (!actualStepsContainer || typeof actualStepsContainer.appendChild !== 'function') {
         console.error("Invalid stored _stepsContainer! Cannot create or append step.");
         
         return null;
    }

    try {
        // create the row element <tr>, don't append to actualStepsContainer yet
        var step = L.DomUtil.create('tr', '');

        // create icon Cell
        var iconCell = L.DomUtil.create('td', 'leaflet-routing-icon', step);
        // Add icon logic here later if needed

        // create instruction cell
        var instructionCell = L.DomUtil.create('td', 'leaflet-routing-instruction-text', step);
        instructionCell.innerHTML = text; // Render HTML

        // distance cell
        var distanceCell = L.DomUtil.create('td', 'leaflet-routing-instruction-distance', step);
        distanceCell.textContent = distance;

        // append the created step <tr> to the stored container <tbody>
        actualStepsContainer.appendChild(step);

        // return the element
        return step;

    } catch (e) {
        console.error("Error during custom createStep execution:", e);
        return null;
    }
    }
});

var customFormatter = new L.Routing.HtmlFormatter ({units: 'imperial'});
var customItineraryBuilder = new L.Routing.CustomItineraryBuilder({});
// we'll want the user to be able to choose their travel mode
let travel = 'WALKING'; // Can be 'WALKING', 'BICYCLING', 'TRANSIT'
// Routing Control
const routeCtrl = L.Routing.control({
    waypoints: [
      L.latLng(LOCATIONS['ite']),
      L.latLng(LOCATIONS['retriever soccer park ticket booth'])
    ],
    /*/ OSRM routing service
    router: L.Routing.osrmv1({
        serviceUrl: 'https://router.project-osrm.org/route/v1'
    }),*/
    // Google Router
    router: new L.Routing.Google({
        travelMode: travel,
        unitSystem: google.maps.UnitSystem.IMPERIAL
    }),
    formatter: customFormatter,
    itineraryBuilder: customItineraryBuilder,
    routeWhileDragging: true,
    position: 'bottomleft',
    fitSelectedRoutes: true,
    addWaypoints: false,
    collapsible: true,
  }).addTo(map);

// Autocomplete for routing inputs
document.addEventListener('DOMContentLoaded', function() {
    const startInput = document.getElementById('route-start');
    const endInput = document.getElementById('route-end');
    
    const startAutocomplete = document.createElement('div');
    const endAutocomplete = document.createElement('div');
    startAutocomplete.className = 'autocomplete-items';
    endAutocomplete.className = 'autocomplete-items';
    startInput.parentNode.appendChild(startAutocomplete);
    endInput.parentNode.appendChild(endAutocomplete);

    // Handling autocomplete
    function setupAutocomplete(input, autocompleteContainer) {
        input.addEventListener('input', function() {
            const value = this.value.toLowerCase().trim();
            
            // Clear previous suggestions
            autocompleteContainer.innerHTML = '';
            
            if (!value) return false;
            
            // Filter matching locations
            const matches = Object.keys(LOCATIONS).filter(key => 
                key.toLowerCase().includes(value)
            );
            
            // Show top 5 matches
            matches.slice(0, 5).forEach(match => {
                const item = document.createElement('div');
                item.innerHTML = match;
                item.addEventListener('click', function() {
                    input.value = match;
                    autocompleteContainer.innerHTML = '';
                });
                autocompleteContainer.appendChild(item);
            });
        });
    }

    // Setup autocomplete for both inputs
    setupAutocomplete(startInput, startAutocomplete);
    setupAutocomplete(endInput, endAutocomplete);

    // Handle routing form submission
    document.getElementById('routing-search').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const startLocation = startInput.value.trim().toLowerCase();
        const endLocation = endInput.value.trim().toLowerCase();

        // Check if locations exist
        if (LOCATIONS[startLocation] && LOCATIONS[endLocation]) {
            // Update routing control waypoints
            routeCtrl.setWaypoints([
                L.latLng(LOCATIONS[startLocation]),
                L.latLng(LOCATIONS[endLocation])
            ]);
        } else {
            alert("Invalid waypoint(s)");
        }
    });

    // Hide suggestions when clicking elsewhere
    document.addEventListener('click', function(e) {
        if (e.target !== startInput && e.target !== endInput) {
            startAutocomplete.innerHTML = '';
            endAutocomplete.innerHTML = '';
        }
    });
});

/* the following block of code will hide the routing search container
    when we hide the routing instructions box */
// Get the routing container element
const routingContainer = document.querySelector('.leaflet-routing-container');
const routingSearchContainer = document.getElementById('routing-search-container');

// Observer to watch for class changes on the routing container
const observer = new MutationObserver(function(mutations) {
    mutations.forEach(function(mutation) {
        if (mutation.attributeName === 'class') {
            // Check if routing container is collapsed
            const isCollapsed = routingContainer.classList.contains('leaflet-routing-container-hide');
            // Toggle search container visibility
            routingSearchContainer.classList.toggle('hidden', isCollapsed);
        }
    });
});

// Start observing the routing container for class changes
observer.observe(routingContainer, {
    attributes: true
});

// Error handling
routeCtrl.on('routingerror', function(e) {
    console.log('Routing error:', e);
});
//#endregion
